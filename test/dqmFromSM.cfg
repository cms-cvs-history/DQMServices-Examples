process test={
    
    untracked PSet maxEvents = {untracked int32 input = -1}

    // SM Event Source
    source = EventStreamHttpReader
    {
        // Change the following line to use a different playback system
	// 1) CERN
        string sourceURL = "http://cmsmon:50082/urn:xdaq-application:lid=29"
	// 2) FNAL
	#string sourceURL = "http://lhc01n02.fnal.gov:50082/urn:xdaq-application:lid=29"
	// 3) ROC
	#string sourceURL = "http://cmsroc9.fnal.gov:50082/urn:xdaq-application:lid=29"
        int32 max_event_size = 7000000
        int32 max_queue_depth = 5

        untracked string consumerName = "Test Consumer"
        untracked string consumerPriority = "normal"
        untracked int32 headerRetryInterval = 3  // seconds
        untracked double maxEventRequestRate = 2.5  // hertz
        untracked PSet SelectEvents = { vstring SelectEvents={"*"} }
    }

    
    # back-end interface service
    service = DaqMonitorROOTBackEnd{}
    
    # MonitorDaemon configuration
    #include "DQMServices/Examples/test/dqm_monitorDaemon.cfi"

    service = MonitorDaemon{
	untracked string DestinationAddress = "localhost"
	untracked int32 SendPort = 9090
    }

    # DQM Source program 
    # code in DQMServices/Daemon/src/DQMSourceExample.cc
    module dqmSource = DQMSourceExample{	
	#Determines connection to back-end daemon
	untracked bool MonitorDaemon = true
	       	
	# Verbosity Switch
	untracked bool debug = false

	# set this flag true to disable writing a ROOT output file
	untracked bool disableROOToutput = true

	# Base name for monitor folders and output file		
	untracked string monitorName = "SMExampleSource"

	# Choices for prescaling your module (-1 mean no prescale)
	# Operate every N events
	untracked int32 diagnosticPrescaleEvt = -1
	# Operate every N lumi sections
	untracked int32 diagnosticPrescaleLS  = -1
	# Operate every N minutes
	untracked int32 diagnosticPrescaleTime = -1
	# Operate every N updates
	untracked int32 diagnosticPrescaleUpdate = -1

    }

    # run the quality tests as defined in QualityTests.xml
    module qTester = QualityTester {
	untracked int32 QualityTestPrescaler = 1
    }

    # DQM Client program
    # code in DQMServices/Examples/src/DQMClientExample.cc
    module dqmClient = DQMClientExample {
	#Determines connection to back-end daemon
	untracked bool MonitorDaemon = true
	       	
	# Verbosity Switch
	untracked bool debug = true

	# set this flag true to disable writing a ROOT output file
	untracked bool disableROOToutput = false

	# Base name for monitor folders and output file		
	untracked string monitorName = "SMExampleClient"

	# Choices for prescaling your module (-1 mean no prescale)
	# Operate every N events
	untracked int32 diagnosticPrescaleEvt = 2
	# Operate every N lumi sections
	untracked int32 diagnosticPrescaleLS  = -1
	# Operate every N minutes
	untracked int32 diagnosticPrescaleTime = -1
	# Operate every N updates
	untracked int32 diagnosticPrescaleUpdate = -1
	
    }

    # send source _AND_ client histograms out to collector every 5000 events
    service = DQMShipMonitoring{
	// event-period for shipping monitoring to collector (default: 25)
	untracked uint32 period = 5000
    }

    # output into logfiles (verbose)
    service = MessageLogger {
	untracked vstring destinations = { 
	    "detailedInfo" , "critical" , "cout"
	}
	untracked vstring debugModules = { "*" }
	untracked PSet critical     = { untracked string threshold = "ERROR"   }
	untracked PSet detailedInfo = { untracked string threshold = "INFO"    } 
	untracked PSet cout = {
	    untracked string threshold = "WARNING"
	    untracked bool noLineBreaks = true
	    untracked PSet WARNING = {untracked int32 limit = 0 }
	}
    }	
    
    path p ={dqmSource & qTester & dqmClient}

} 
