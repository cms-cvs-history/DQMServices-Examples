process test={
    
    untracked PSet maxEvents = {untracked int32 input = -1}

    // SM Event Source
    source = EventStreamHttpReader
    {
        // Change the following line to use a different playback system
	// 1) CERN
        #string sourceURL = "http://cmsmon:50082/urn:xdaq-application:lid=29"
	// 2) FNAL
	#string sourceURL = "http://lhc01n02.fnal.gov:50082/urn:xdaq-application:lid=29"
	// 3) ROC
	string sourceURL = "http://cmsroc9.fnal.gov:50082/urn:xdaq-application:lid=29"
        int32 max_event_size = 7000000
        int32 max_queue_depth = 5

        untracked string consumerName = "Test Consumer"
        untracked string consumerPriority = "normal"
        untracked int32 headerRetryInterval = 3  // seconds
        untracked double maxEventRequestRate = 2.5  // hertz
        untracked PSet SelectEvents = { vstring SelectEvents={"*"} }
    }

    # back-end interface service
    service = DaqMonitorROOTBackEnd{}
    
    # send source _AND_ client histograms out to collector every 5000 events
    service = DQMShipMonitoring{
	// event-period for shipping monitoring to collector (default: 25)
	untracked uint32 period = 5000
    }

    # MonitorDaemon configuration
    # optionally use the following line instead of the ones below
    # include "DQMServices/Examples/test/dqm_monitorDaemon.cfi"
    service = MonitorDaemon{
	untracked string DestinationAddress = "localhost"
	untracked int32 SendPort = 9090
    }

    # DQM Source program 
    # code in DQMServices/Daemon/src/DQMSourceExample.cc
    module dqmSource = DQMSourceExample{	
	# Base name for monitor folders and output file		
	untracked string monitorName = "SubsysSrc01"
	# Operate every N events (default: -1 no prescale)
	untracked int32 prescaleEvt = -1
    }

    # run the quality tests as defined in QualityTests.xml
    module qTester = QualityTester {
	untracked int32 QualityTestPrescaler = 5000
    }

    # DQM Client program
    # code in DQMServices/Examples/src/DQMExampleClient.cc
    # notes:
    module dqmClient = DQMClientExample {
	# Base name for monitor folders and output file		
	// untracked string monitorName = "SubsysClnt01"
	# Operate every N lumi sections
	untracked int32 prescaleLS  = -1
	# Operate every N events
	untracked int32 prescaleEvt  = 1000
    }

    # DQM Online Environment
    # PUT THIS MODULE INTO YOUR PATH FOR OPERATION AT P5
    module dqmEnv = EventCoordinatesSource {
        # define folder to store event info (default: EventInfo)
        untracked string eventInfoFolder = "EventInfo"
    }
    
    # DQM Online File saver module
    # PUT THIS MODULE INTO YOUR PATH FOR OPERATION AT P5
    module dqmSaver = DQMFileSaver {
        # subsystem name (appears in filename)
        # default is: filename is taken from SourceName
        #             (toplevel of me-dir-tree) fixme
        untracked string fileName = "SubsystemName"
	# environment flag (default: "Online")
	//# FIXME should be implemented in dbe::save first
        untracked string environment = "Online"
        # Save file every N lumi sections (-1: disabled)
        untracked int32 prescaleLS = -1
        # Save file every N events (-1: disabled)
        untracked int32 prescaleEvt = -1
        # Save file every N minutes (-1: disabled)
        untracked int32 prescaleTime = -1
        # Save at end of run, runnumber in filename (default: true)
        untracked bool saveAtRunEnd = true
        # Save at end of job, no runnumber in filename (default: false)
        untracked bool saveAtJobEnd = false
    }

    # output into logfiles (verbose)
    service = MessageLogger {
	untracked vstring destinations = { 
	    "detailedInfo" , "critical" , "cout"
	}
	untracked vstring debugModules = { "*" }
	untracked PSet critical     = { untracked string threshold = "ERROR"   }
	untracked PSet detailedInfo = { untracked string threshold = "INFO"    } 
	untracked PSet cout = {
	    untracked string threshold = "WARNING"
	    untracked bool noLineBreaks = true
	    untracked PSet WARNING = {untracked int32 limit = 0 }
	}
    }	
    
    path p ={dqmSource & qTester & dqmClient & dqmEnv & dqmSaver }

} 
