process test={
    
    untracked PSet maxEvents = {untracked int32 input = 10000}
    source = EventStreamHttpReader
    {
        // Change the following line to use a different playback system
	// 1) CERN
        string sourceURL = "http://cmsmondev:50082/urn:xdaq-application:lid=29"
	// 2) FNAL
	#string sourceURL = "http://lhc01n02.fnal.gov:50082/urn:xdaq-application:lid=29"
	// 3) ROC
	#string sourceURL = "http://cmsroc9.fnal.gov:50082/urn:xdaq-application:lid=29"
        int32 max_event_size = 7000000
        int32 max_queue_depth = 5
        untracked string SelectHLTOutput = "out4DQM"
        untracked string consumerName = "Test Consumer"
        untracked string consumerPriority = "normal"
        untracked int32 headerRetryInterval = 3  // seconds
        untracked double maxEventRequestRate = 2.5  // hertz
        untracked PSet SelectEvents = { vstring SelectEvents={"*"} }
    }
    
    #### include this to get DQM histogramming services
    ####
    include "DQMServices/Core/data/DQM.cfg"
    #### optionally replace defaults in DQMStore and DQM  
    ####
    replace DQMStore.verbose = 0 
    // replace DQMStore.referenceFileName = "ref.root"
    ####
    replace DQM.collectorHost = "" 
    # replace DQM.collectorPort = 9090
    # replace DQM.publishFrequency = 5
    # replace DQM.debug = false

    # DQM Source program 
    # code in DQMServices/Daemon/src/DQMSourceExample.cc
    module dqmSource = DQMSourceExample{
	# Base name for monitor folders and output file		
        untracked string monitorName = "YourSubsystemName"
	# Operate every N events (default: -1 no prescale)
	untracked int32 prescaleEvt = 10
    }

    # run the quality tests as defined in QualityTests.xml
    module qTester = QualityTester { 
      ## default is 1
      untracked int32 prescaleFactor = 1000
      ## use eventloop for testing only ! default is false
      # untracked bool testInEventloop = false
      ## use qtest on endRun or endJob, default false
      # untracked bool qtestOnEndRun = false
      # untracked bool qtestOnEndJob = false
      untracked FileInPath qtList = "DQMServices/Examples/test/QualityTests.xml"
    //  untracked FileInPath qtList = "DQMServices/ClientConfig/test/QT_Comp2RefChi2.xml"
    //  untracked FileInPath qtList = "DQMServices/ClientConfig/test/QT_Comp2RefEqualH1.xml"
    //  untracked FileInPath qtList = "DQMServices/ClientConfig/test/QT_Comp2RefEqualH2.xml"
    // 	untracked FileInPath qtList = "DQMServices/ClientConfig/test/QT_Comp2RefEqualH3.xml"
    //  untracked FileInPath qtList = "DQMServices/ClientConfig/test/QT_Comp2RefKolmogorov.xml"
    //  untracked FileInPath qtList = "DQMServices/ClientConfig/test/QT_ContentsXRange.xml"
    //  untracked FileInPath qtList = "DQMServices/ClientConfig/test/QT_ContentsYRange.xml"
    //  untracked FileInPath qtList = "DQMServices/ClientConfig/test/QT_DeadChannel.xml"
    //	untracked FileInPath qtList = "DQMServices/ClientConfig/test/QT_MeanWithinExpected.xml"
    //	untracked FileInPath qtList = "DQMServices/ClientConfig/test/QT_NoisyChannel.xml"
    }

    # DQM Client program
    # code in DQMServices/Examples/src/DQMExampleClient.cc
    # notes:
    module dqmClient = DQMClientExample {
	# Base name for monitor folders and output file		
	untracked string monitorName = "YourSubsystemName"
	# Operate every N lumi sections
	untracked int32 prescaleLS  = 1
	# Operate every N events
	untracked int32 prescaleEvt  = 1000
    }

    # output into logfiles (verbose)
    service = MessageLogger {
        untracked vstring destinations = { 
            "detailedInfo" , "critical" , "cout"
        }
        untracked vstring debugModules = { "*" }
        untracked PSet critical     = { untracked string threshold = "ERROR"   }
        untracked PSet detailedInfo = { untracked string threshold = "INFO"    } 
        untracked PSet cout = {
            untracked string threshold = "WARNING"
            untracked bool noLineBreaks = true
            untracked PSet WARNING = {untracked int32 limit = 0 }
        }
    }

    #########################################################
    #### BEGIN DQM Online Environment #######################
    #########################################################
    
    #### PUT THE FOLLOWING INTO YOUR PATH FOR OPERATION AT P5
    #### REPLACE YourSubsystemName by the name of your source ###
    
    # use include file for dqmEnv dqmSaver
       include "DQMServices/Components/data/DQMEnvironment.cfi"
       # Possible conventions are "Online", "Offline" and "RelVal".
       # Default is "Offline"
       replace dqmSaver.convention    = "Online"
       // replace dqmSaver.workflow      = ""
       // replace dqmSaver.dirName       = "."
       # This is the filename prefix 
       replace dqmSaver.producer        = "DQM" 
       # (this goes into the foldername)
       replace dqmEnv.subSystemFolder   = "YourSubsystemName"
       # Ignore run number for MC data
       // replace dqmSaver.forceRunNumber  = -1
       
       # optionally change fileSaving  conditions
       // replace dqmSaver.saveByLumiSection =   -1
       // replace dqmSaver.saveByMinute = -1 
       // replace dqmSaver.saveByEvent =  -1
       // replace dqmSaver.saveByRun =     1
       // replace dqmSaver.saveAtJobEnd = false
       # will add switch to select histograms to be saved soon
   
    #########################################################
    #### END ################################################
    #########################################################
 
    ### FIX YOUR  PATH TO INCLUDE dqmEnv and dqmSaver

    path p ={dqmSource & qTester  & dqmClient & dqmEnv & dqmSaver }

} 
