#!/usr/bin/perl

################################################################################
#
# initialize
# ----------
#
# Setup XDAQ filter farm applications for testing, and generate scripts to
# control execution.
#
#                          03/28/2007 Philipp Schieferdecker <schiefer@fnal.gov>
#                                     modified for ECAL DQM
################################################################################


# welcome
print "\n============================================================";
print "\ninitialize ...";
print "\n============================================================\n";

my $PBfile;

my $monitorCount = 0;

# hostname, default
my $hostname = $ENV{"HOST"};
my $collectorhost = $ENV{"HOST"};

# set variables
my $BUport = 40000;
my $PBport = 40000;
my $RBport = 40000;
my $EPport = 40001;
my $DPport = 40002;
my $SMport = 40003;
my $MNport = 40004;

my $BUappname = "evf::BU";
my $PBappname = "evf::FUEventProcessor";
my $RBappname = "evf::FUResourceBroker";
my $EPappname = "evf::FUEventProcessor";
my $DPappname = "evf::FUEventProcessor";
my $SMappname = "StorageManager";
my $PTappname = "PeerTransportTCP";
my $MNappname = "Monitor";

my $BUlocalid=21;
my $PBlocalid=22;
my $RBlocalid=26;
my $EPlocalid=27;
my $DPlocalid=27;
my $SMlocalid=44;

my $BUlibpath = getLibraryPath("EventFilter/AutoBU");
my $PBlibpath = getLibraryPath("EventFilter/Processor");
my $RBlibpath = getLibraryPath("EventFilter/ResourceBroker");
my $EPlibpath = getLibraryPath("EventFilter/Processor");
my $DPlibpath = getLibraryPath("EventFilter/Processor");
my $SMlibpath = getLibraryPath("EventFilter/StorageManager");
my $PTlibpath = $ENV{"XDAQ_ROOT"} . "/lib";
my $MNlibpath = $ENV{"XDAQ_ROOT"} . "/lib";

my $BUlibname = "libEventFilterAutoBU.so";
my $PBlibname = "libEventFilterProcessor.so";
my $RBlibname = "libEventFilterResourceBroker.so";
my $EPlibname = "libEventFilterProcessor.so";
my $DPlibname = "libEventFilterProcessor.so";
my $SMlibname = "libEventFilterStorageManager.so";
my $PTlibname = "libpttcp.so";
my $MNlibname = "libmonitor.so";

my $SMperl = 
    $ENV{"CMSSW_RELEASE_BASE"} .
    "/src/EventFilter/StorageManager/scripts/perl";

my $pwd = `pwd`; chomp $pwd;

#
# interpret command line
#
use vars qw( %opts );
use Getopt::Long;

Getopt::Long::config('bundling_override');
%opts = ();

GetOptions( \%opts, "host|h=s", "collector|c=s", "playback|p=s" );

$hostname = $opts{'host'} if ( $opts{'host'} ) ;
$collectorhost = $opts{'collector'} if ( $opts{'collector'} );
$PBfile = $opts{'playback'} if ( $opts{'playback'} );

print "hostname = $hostname\n";
print "collector = $collectorhost\n";
print "playback file = $PBfile\n";

#
# make directories
#
print "make directories ...\n";
`mkdir log`            if (! -e "log");
`mkdir soap`           if (! -e "soap");
`mkdir xml`            if (! -e "xml");
`mkdir cfg`            if (! -e "cfg");
`mkdir flash`          if (! -e "flash");
`mkdir /tmp/sm`        if (! -e "/tmp/sm");
`mkdir /tmp/sm/open`   if (! -e "/tmp/sm/open");
`mkdir /tmp/sm/closed` if (! -e "/tmp/sm/closed");
`mkdir /tmp/sm/mbox`   if (! -e "/tmp/sm/mbox");

#
# make cfg files
#
print "make cfg files ...\n";

open(CFG,">./cfg/fu.cfg") or die ("Can't open file: $!\n");
print CFG makeCfgFu();
close(CFG);

open(CFG,">./cfg/sm.cfg") or die ("Can't open file: $!\n");
print CFG makeCfgSm();
close(CFG);

open(CFG,">./cfg/playback.cfg") or die ("Can't open file: $!\n");
print CFG makeCfgPlayback($PBfile);
close(CFG);

open(CFG,">./cfg/client.cfg") or die ("Can't open file: $!\n");
print CFG makeCfgClient();
close(CFG);

#
# make XDAQ 'profile.xml'
#
print "make xdaq profile ...\n";

my @EXproperties = ("logUrl",  "string","console",
		    "logLevel","string","INFO");

open (XML,">./xml/profile.xml") or die ("Can't open file: $!\n");
print XML makeXmlHeader();
print XML makeXmlProfileHeader();
print XML makeXmlAppHeader(0,"Executive",0);
print XML makeXmlAppProperties("Executive",@EXproperties);
print XML makeXmlAppTrailer(0,$ENV{"XDAQ_ROOT"}."/lib","libexecutive.so");
print XML makeXmlAppHeader(0,"PeerTransportHTTP",1);
print XML makeXmlAppTrailer(0,$ENV{"XDAQ_ROOT"}."/lib","libpthttp.so");
print XML makeXmlAppHeader(0,"PeerTransportFifo",8);
print XML makeXmlAppTrailer(0,$ENV{"XDAQ_ROOT"}."/lib","libptfifo.so");
print XML makeXmlAppHeader(0,"XRelay",4);
print XML makeXmlAppTrailer(0,$ENV{"XDAQ_ROOT"}."/lib","libxr.so");
print XML makeXmlAppHeader(0,"HyperDAQ",3);
print XML makeXmlAppTrailer(0,$ENV{"XDAQ_ROOT"}."/lib","libhyperdaq.so");
print XML makeXmlProfileTrailer();

#
# make  xdaq configuraion file 'evf.xml'
#
print "make xdaq configuration ...\n";

my @apps = ($BUappname,$BUlocalid,0,
	    $RBappname,$RBlocalid,0,
            $SMappname,$SMlocalid,0,
	    $MNappname,50,0,
	    $MNappname,51,1,
	    $MNappname,52,2);

my @PBproperties = ("parameterSet","string","file:$pwd/cfg/playback.cfg",
#		    "hasSharedMemory","boolean","false",
		    "collectorAddr",  "string", "$collectorhost",
		    "collectorPort",  "integer","9091",
		    "monSourceName",  "string", "PB01",
		    "collReconnSec","integer","-1");

my @RBproperties = ("buClassName", "string",     $BUappname,
		    "nbRawCells",  "unsignedInt","16",
		    "nbRecoCells", "unsignedInt","3",
		    "nbDqmCells",  "unsignedInt","3",
		    "rawCellSize", "unsignedInt","0x300000",
		    "recoCellSize","unsignedInt","0x300000",
		    "dqmCellSize", "unsignedInt","0x300000");

my @EPproperties = ("parameterSet", "string","file:$pwd/cfg/fu.cfg",
#		    "hasSharedMemory","boolean","false",
		    "collectorAddr",  "string", "$collectorhost",
		    "collectorPort",  "integer","9091",
		    "monSourceName",  "string", "EP01",
		    "collReconnSec","integer","-1");

my @DPproperties = ("parameterSet",   "string","file:$pwd/cfg/client.cfg",
#		    "hasSharedMemory","boolean","false",
		    "collectorAddr",  "string", "$collectorhost",
		    "collectorPort",  "integer","9091",
		    "monSourceName",  "string", "EP02",
		    "collReconnSec","integer","-1");

my @SMproperties = ("STparameterSet",   "string",     "file:$pwd/cfg/sm.cfg",
		    "runNumber",        "unsignedInt","0",
		    "fileCatalog",      "string",     "summaryCatalog.txt",
		    "closeFileScript",  "string",     "$SMperl/dummy.pl",
		    "notifyTier0Script","string",     "$SMperl/dummy.pl",
		    "insertFileScript", "string",     "$SMperl/dummy.pl");

open (XML,">./xml/evf.xml") or die ("Can't open file: $!\n");
print XML makeXmlHeader();
print XML makeXmlPartitionHeader();
print XML makeXmlComm(@apps);

# BU context
print XML makeXmlContextHeader("BU",$hostname,$BUport);
print XML makeXmlEndpoint($hostname,50000);
print XML makeXmlAppMonitor();
print XML makeXmlAppTrailer(1,$MNlibpath,$MNlibname);
print XML makeXmlAppHeader(1,$BUappname,$BUlocalid);
print XML makeXmlAppTrailer(1,$BUlibpath,$BUlibname);
print XML makeXmlAppHeader(1,$PBappname,$PBlocalid);
print XML makeXmlAppProperties($PBappname,@PBproperties);
print XML makeXmlAppTrailer(1,$EPlibpath,$EPlibname);
print XML makeXmlAppHeader(1,$RBappname,$RBlocalid);
print XML makeXmlAppProperties($RBappname,@RBproperties);
print XML makeXmlUnicast($SMappname);
print XML makeXmlAppTrailer(1,$RBlibpath,$RBlibname);
print XML makeXmlAppHeader(1,$PTappname,50);
print XML makeXmlAppTrailer(1,$PTlibpath,$PTlibname);
print XML makeXmlContextTrailer();

# EP context
print XML makeXmlContextHeader("EP",$hostname,$EPport);
print XML makeXmlAppMonitor();
print XML makeXmlAppTrailer(1,$MNlibpath,$MNlibname);
print XML makeXmlAppHeader(1,$EPappname,$EPlocalid);
print XML makeXmlAppProperties($EPappname,@EPproperties);
print XML makeXmlAppTrailer(1,$EPlibpath,$EPlibname);
print XML makeXmlContextTrailer();

# Client context
print XML makeXmlContextHeader("DP",$hostname,$DPport);
print XML makeXmlAppHeader(1,$DPappname,$DPlocalid);
print XML makeXmlAppProperties($DPappname,@DPproperties);
print XML makeXmlAppTrailer(1,$DPlibpath,$DPlibname);
print XML makeXmlContextTrailer();

# SM context
print XML makeXmlContextHeader("SM",$hostname,$SMport);
print XML makeXmlEndpoint($hostname,50002);
print XML makeXmlAppMonitor();
print XML makeXmlAppTrailer(1,$MNlibpath,$MNlibname);
print XML makeXmlAppHeader(1,$SMappname,$SMlocalid);
print XML makeXmlAppProperties($SMappname,@SMproperties);
print XML makeXmlUnicast($RBappname);
print XML makeXmlAppTrailer(1,$SMlibpath,$SMlibname);
print XML makeXmlAppHeader(1,$PTappname,52);
print XML makeXmlAppTrailer(1,$PTlibpath,$PTlibname);
print XML makeXmlContextTrailer();

# MN context (Collector)
print XML makeXmlContextHeader("MN",$hostname,$MNport);
print XML makeXmlAppMonitor();
print XML makeXmlAppTrailer(1,$MNlibpath,$MNlibname);
print XML makeXmlContextTrailer();

print XML makeXmlPartitionTrailer();
close (XML);

#
# make soap command xml files
#
print "make soap command files ...\n";

my @commands = ('Configure','Enable','Stop','Halt' );

foreach  (@commands) {
    open(CMD,">./soap/$_"."BU.xml") or die ("Can't open file: $!\n");
    print CMD makeSoapCommand($hostname,$BUport,$BUlocalid,$_);
    close(CMD);
    
    open(CMD,">./soap/$_"."PB.xml") or die ("Can't open file: $!\n");
    print CMD makeSoapCommand($hostname,$PBport,$PBlocalid,$_);
    close(CMD);
    
    open(CMD,">./soap/$_"."RB.xml") or die ("Can't open file: $!\n");
    print CMD makeSoapCommand($hostname,$RBport,$RBlocalid,$_);
    close(CMD);
    
    open(CMD,">./soap/$_"."EP.xml") or die ("Can't open file: $!\n");
    print CMD makeSoapCommand($hostname,$EPport,$EPlocalid,$_);
    close(CMD);
    
    open(CMD,">./soap/$_"."DP.xml") or die ("Can't open file: $!\n");
    print CMD makeSoapCommand($hostname,$DPport,$DPlocalid,$_);
    close(CMD);
    
    open(CMD,">./soap/$_"."SM.xml") or die ("Can't open file: $!\n");
    print CMD makeSoapCommand($hostname,$SMport,$SMlocalid,$_);
    close(CMD);
}

#
# make control scripts
#
print "make control scripts ...\n";

# configure
open (CTL,">configure") or die ("Can't open file: $!\n");
print CTL "#!/usr/bin/perl\n\n";
print CTL makeCtlCommand("Configure",$SMappname,"SM",$hostname,$SMport,1);
print CTL makeCtlCommand("Configure",$RBappname,"RB",$hostname,$RBport,5);
print CTL makeCtlCommand("Configure",$PBappname,"PB",$hostname,$PBport,5);
print CTL makeCtlCommand("Enable",   $PBappname,"PB",$hostname,$PBport,5);
print CTL makeCtlCommand("Configure",$BUappname,"BU",$hostname,$BUport,0);
print CTL makeCtlCommand("Configure",$EPappname,"EP",$hostname,$EPport,0);
close (CTL);
`chmod +x configure`;

# enable
open (CTL,">enable") or die ("Can't open file: $!\n");
print CTL "#!/usr/bin/perl\n\n";
print CTL makeCtlCommand("Enable",   $SMappname,"SM",$hostname,$SMport,1);
print CTL makeCtlCommand("Enable",   $BUappname,"BU",$hostname,$BUport,0);
print CTL makeCtlCommand("Enable",   $RBappname,"RB",$hostname,$RBport,0);
print CTL makeCtlCommand("Enable",   $EPappname,"EP",$hostname,$EPport,0);
print CTL makeCtlCommand("Configure",$DPappname,"DP",$hostname,$DPport,60);
print CTL makeCtlCommand("Enable",   $DPappname,"DP",$hostname,$DPport,0);
close (CTL);
`chmod +x enable`;

# stop
open (CTL,">stop") or die ("Can't open file: $!\n");
print CTL "#!/usr/bin/perl\n\n";
print CTL makeCtlCommand("Stop",$BUappname,"BU",$hostname,$BUport,10);
print CTL makeCtlCommand("Stop",$RBappname,"RB",$hostname,$RBport,0);
print CTL makeCtlCommand("Stop",$EPappname,"EP",$hostname,$EPport,5);
print CTL makeCtlCommand("Stop",$DPappname,"DP",$hostname,$DPport,5);
print CTL makeCtlCommand("Stop",$SMappname,"SM",$hostname,$SMport,0);
close (CTL);
`chmod +x stop`;

# halt
open (CTL,">halt") or die ("Can't open file: $!\n");
print CTL "#!/usr/bin/perl\n\n";
print CTL makeCtlCommand("Halt",$BUappname,"BU",$hostname,$BUport,0);
print CTL makeCtlCommand("Halt",$RBappname,"RB",$hostname,$RBport,0);
print CTL makeCtlCommand("Halt",$PBappname,"PB",$hostname,$PBport,1);
print CTL makeCtlCommand("Halt",$EPappname,"EP",$hostname,$EPport,1);
print CTL makeCtlCommand("Halt",$DPappname,"DP",$hostname,$DPport,1);
print CTL makeCtlCommand("Halt",$SMappname,"SM",$hostname,$SMport,0);
close (CTL);
`chmod +x halt`;

# destroy
open (CTL,">destroy") or die ("Can't open file: $!\n");
print CTL makeCtlDestroy();
close (CTL);
`chmod +x destroy`;

#
# make flash lists for monitoring
#

makeFlashLists();

#
# start processes
#

print "\nstart xdaq.exe on $hostname:$BUport\n";
`nice -n 15 xdaq.exe -h $hostname -p $BUport -e xml/profile.xml -c xml/evf.xml >& log/$hostname.$BUport.log &`;

print "\nstart xdaq.exe on $hostname:$EPport\n";
`nice -n 15 xdaq.exe -h $hostname -p $EPport -e xml/profile.xml -c xml/evf.xml >& log/$hostname.$EPport.log &`;

print "\nstart xdaq.exe on $hostname:$DPport\n";
`nice -n 15 xdaq.exe -h $hostname -p $DPport -e xml/profile.xml -c xml/evf.xml >& log/$hostname.$DPport.log &`;

print "\nstart xdaq.exe on $hostname:$SMport\n";
`nice -n 15 xdaq.exe -h $hostname -p $SMport -e xml/profile.xml -c xml/evf.xml >& log/$hostname.$SMport.log &`;

print "\nstart xdaq.exe on $hostname:$MNport\n";
`nice -n 15 xdaq.exe -h $hostname -p $MNport -e xml/profile.xml -c xml/evf.xml >& log/$hostname.$MNport.log &`;

################################################################################
################################################################################
## sub routines
################################################################################
################################################################################

################################################################################
sub getLibraryPath
{
    my ($pkg) = (@_);
    
    my $cmssw_base         = $ENV{"CMSSW_BASE"};
    my $cmssw_release_base = $ENV{"CMSSW_RELEASE_BASE"};

    my $result = "/lib/" . $ENV{"SCRAM_ARCH"};
    
    if (-e "$cmssw_base/src/$pkg") {
	$result = $cmssw_base . $result;
    }
    else {
	$result = $cmssw_release_base . $result;
    }

    return $result;
}

################################################################################
sub makeSoapCommand
{
    my ($hostname,$port,$localid,$command) = @_;
    
    my $result="";
    
    $result = $result . "<SOAP-ENV:Envelope\n";
    $result = $result . "  SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"\n";
    $result = $result . "  xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\n";
    $result = $result . "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n";
    $result = $result . "  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n";
    $result = $result . "  xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\">\n\n";
    $result = $result . "<SOAP-ENV:Header>\n";
    $result = $result . "  <xr:relay SOAP-ENV:actor=\"http://xdaq.web.cern.ch/xdaq/xsd/2004/XRelay-10\"\n";
    $result = $result . "    xmlns:xr=\"http://xdaq.web.cern.ch/xdaq/xsd/2004/XRelay-10\">\n";
    $result = $result . "  <xr:to url=\"http://$hostname:$port\" urn=\"urn:xdaq-application:lid=$localid\"/>\n";
    $result = $result . "</xr:relay>\n";
    $result = $result . "</SOAP-ENV:Header>\n\n";
    $result = $result . "<SOAP-ENV:Body>\n";
    $result = $result . "  <xdaq:$command xmlns:xdaq=\"urn:xdaq-soap:3.0\"></xdaq:$command>\n";
    $result = $result . "</SOAP-ENV:Body>\n\n";
    $result = $result . "</SOAP-ENV:Envelope>\n";
    
    return $result;
}

################################################################################
sub makeCfgFu
{
    my $result="";
    
    $result = $result . "process FU = {\n";

    $result = $result . "  \n";
    $result = $result . "  // options\n";

    $result = $result . "  \n";
    $result = $result . "  untracked PSet options = {\n";
    $result = $result . "    untracked vstring Rethrow = {\n";
    $result = $result . "      \"ProductNotFound\",\n";
    $result = $result . "      \"TooManyProducts\",\n";
    $result = $result . "      \"TooFewProducts\"\n";
    $result = $result . "    }\n";
    $result = $result . "    untracked bool makeTriggerResults = true\n";
    $result = $result . "  }\n";

    $result = $result . "  \n";
    $result = $result . "  untracked PSet maxEvents = {untracked int32 input = -1}\n";

    $result = $result . "  \n";
    $result = $result . "  // source\n";

    $result = $result . "  \n";
    $result = $result . "  source = DaqSource {\n";
    $result = $result . "    string reader = \"FUShmReader\"\n";
    $result = $result . "  }\n";

    $result = $result . "  \n";
    $result = $result . "  // modules\n";

    $result = $result . "  \n";
    $result = $result . "  module out = ShmStreamConsumer {\n";
    $result = $result . "    int32           max_event_size       = 7000000\n";
    $result = $result . "    int32           max_queue_depth      =       5\n";
    $result = $result . "    bool            use_compression      =    true\n";
    $result = $result . "    int32           compression_level    =       1\n";
    $result = $result . "    untracked int32 lumiSection_interval =     600\n";
    $result = $result . "  }\n";

    $result = $result . "  \n";
    $result = $result . "  module print = AsciiOutputModule { }\n";

    $result = $result . "  \n";
    $result = $result . "  // paths\n";

    $result = $result . "  \n";
    $result = $result . "  path p = { print }\n";

    $result = $result . "  \n";
    $result = $result . "  endpath q = { out }\n";

    $result = $result . "  \n";
    $result = $result . "  // services\n";

#    $result = $result . "  \n";
#    $result = $result . "  service = MessageLogger {\n";
#    $result = $result . "    untracked vstring destinations = { \"cout\" }\n";
#    $result = $result . "    untracked PSet cout = {\n";
#    $result = $result . "      untracked string threshold = \"FATAL\"\n";
#    $result = $result . "    }\n";
#    $result = $result . "  }\n";

    $result = $result . "  \n";
    $result = $result . "  service = FUShmDQMOutputService {\n";
    $result = $result . "    untracked int32 initialMessageBufferSize=1000000\n";
    $result = $result . "    double          lumiSectionsPerUpdate   =    1.0\n";
    $result = $result . "    bool            useCompression          =   true\n";
    $result = $result . "    int32           compressionLevel        =      1\n";
    $result = $result . "    untracked int32 lumiSectionInterval     =     30\n";
    $result = $result . "  }\n";

    $result = $result . "}\n";
    
    return $result;
}

################################################################################
sub makeCfgSm
{
    my $result = "";

    $result = $result . "process SM  = {\n";

    $result = $result . "  \n";
    $result = $result . "  // source\n";

    $result = $result . "  \n";
    $result = $result . "  source = FragmentInput { }\n\n";

    $result = $result . "  \n";
    $result = $result . "  // paths\n";

    $result = $result . "  \n";
    $result = $result . "  endpath q = { out  }\n";

    $result = $result . "  \n";
    $result = $result . "  // modules\n";

    $result = $result . "  \n";
    $result = $result . "  module out = EventStreamFileWriter {\n";
    $result = $result . "    int32 max_event_size    = 7000000\n";
    $result = $result . "    int32 max_queue_depth   =       5\n";
    $result = $result . "    bool use_compression    =   false\n";
    $result = $result . "    int32 compression_level =       1\n\n";
    $result = $result . "    string fileName           =     \"storageManager\"\n";
    $result = $result . "    string indexFileName      = \"storageManager.ind\"\n";
    $result = $result . "    string filePath           =            \"/tmp/sm\"\n";
    $result = $result . "    string mailboxPath        =       \"/tmp/sm/mbox\"\n";
    $result = $result . "    string setupLabel         =               \"mtcc\"\n";
    $result = $result . "    string streamLabel        =                  \"A\"\n";
    $result = $result . "    int32  maxSize            =            536870912\n";
    $result = $result . "    double highWaterMark      =                  0.9\n";
    $result = $result . "    double lumiSectionTimeOut =                 10.0\n\n";
    $result = $result . "    untracked PSet SelectEvents = { vstring SelectEvents={\"p\"}}\n";
    $result = $result . "  }\n";

    $result = $result . "}\n";

    return $result;
}

################################################################################
sub makeCfgPlayback
{
    my ($file) = (@_);

    my @input_files;

    if ($file =~ m/\.root$/) {
	push (@input_files, $file);
    }
    else {
	open (FILELIST,$file);
	while (<FILELIST>) {
	    my $next_file = $_;
	    chomp($next_file);
	    if ($next_file =~ m/\.root$/) { push (@input_files, $next_file); }
	    else { print("ERROR: $next_file does not appear to be a ROOT file.\n"); }
	}
    }
    
    my $result = "";

    $result = $result . "process PLAYBACK = {\n";

    $result = $result . "  \n";
    $result = $result . "  // source\n";

    $result = $result . "  \n";
    $result = $result . "  source = PoolSource {\n";
    $result = $result . "    untracked vstring fileNames = {";
    foreach (@input_files) {
      $result = $result . "\n      'file:" . $_ . "',";
    }
    $result =~ s/,$/\n    \}\n/;
    $result = $result . "    untracked uint32 skipEvents= 0\n";
    $result = $result . "  }\n";

    $result = $result . "  \n";
    $result = $result . "  // path(s)\n";

    $result = $result . "  \n";
    $result = $result . "  path p = { playback }\n";

    $result = $result . "  \n";
    $result = $result . "  // services\n";

#    $result = $result . "  \n";
#    $result = $result . "  service = MessageLogger {\n";
#    $result = $result . "    untracked vstring destinations = { \"cout\" }\n";
#    $result = $result . "    untracked PSet cout = {\n";
#    $result = $result . "      untracked string threshold = \"FATAL\"\n";
#    $result = $result . "    }\n";
#    $result = $result . "  }\n";

    $result = $result . "  \n";
    $result = $result . "  service = FUShmDQMOutputService {\n";
    $result = $result . "    untracked int32 initialMessageBufferSize=1000000\n";
    $result = $result . "    double          lumiSectionsPerUpdate   =    1.0\n";
    $result = $result . "    bool            useCompression          =   true\n";
    $result = $result . "    int32           compressionLevel        =      1\n";
    $result = $result . "    untracked int32 lumiSectionInterval     =     30\n";
    $result = $result . "  }\n";

    $result = $result . "  \n";
    $result = $result . "  // modules\n";

    $result = $result . "  \n";
    $result = $result . "  module playback = PlaybackRawDataProvider {\n";
    $result = $result . "    untracked uint32 queueSize = 32\n";
    $result = $result . "  }\n";

    $result = $result . "}\n";

    return $result;
}

################################################################################
    
sub makeCfgClient
{   
    my $result="";

    $result = $result . "process ECALDQM = {\n";

    $result = $result . "  \n";
    $result = $result . "  untracked PSet maxEvents = {untracked int32 input = -1}\n";

    $result = $result . "  \n";
    $result = $result . "  // source\n";

    $result = $result . "  \n";
    $result = $result . "  source = EventStreamHttpReader {\n";
    $result = $result . "    string sourceURL = \"http:\/\/".$hostname.":".$SMport."/urn:xdaq-application:lid=".$SMlocalid."\"\n";
    $result = $result . "    int32 max_event_size = 7000000\n";
    $result = $result . "    int32 max_queue_depth = 5\n";
    $result = $result . "    untracked string consumerName = \"ECAL DQM Source\"\n";
    $result = $result . "    untracked string consumerPriority = \"normal\"\n";
    $result = $result . "    untracked int32 headerRetryInterval = 3\n";
    $result = $result . "    untracked double maxEventRequestRate = 2.5\n";
    $result = $result . "    untracked PSet SelectEvents = { vstring SelectEvents={\"*\"} }\n";
    $result = $result . "  }\n";

    $result = $result . "  \n";
    $result = $result . "  // modules\n";

    $result = $result . "  \n";
    $result = $result . "include \"EventFilter/EcalTBRawToDigi/data/EcalUnpackerData.cfi\"\n";
#    $result = $result . "include \"EventFilter/EcalRawToDigiDev/data/EcalUnpackerData.cfi\"\n";

    $result = $result . "  \n";
    $result = $result . "  module ecalUncalibHit = ecalFixedAlphaBetaFitUncalibRecHit from \"RecoLocalCalo/EcalRecProducers/data/ecalFixedAlphaBetaFitUncalibRecHit.cfi\"\n";
    $result = $result . "  \n";
    $result = $result . "  replace ecalUncalibHit.EBdigiCollection = ecalEBunpacker:ebDigis\n";
    $result = $result . "  replace ecalUncalibHit.EEdigiCollection = ecalEBunpacker:eeDigis\n";

    $result = $result . "  \n";
    $result = $result . "include \"RecoLocalCalo/EcalRecProducers/data/ecalRecHit.cfi\"\n";
    $result = $result . "  \n";
    $result = $result . "  replace ecalRecHit.EBuncalibRecHitCollection = ecalUncalibHit:EcalUncalibRecHitsEB\n";
    $result = $result . "  replace ecalRecHit.EEuncalibRecHitCollection = ecalUncalibHit:EcalUncalibRecHitsEE\n";

    $result = $result . "  \n";
    $result = $result . "include \"DQM/EcalBarrelMonitorModule/data/EcalBarrelMonitorModule.cfi\"\n";

    $result = $result . "  \n";
    $result = $result . "  replace ecalBarrelMonitorModule.enableMonitorDaemon = false\n";
    $result = $result . "  replace ecalBarrelMonitorModule.enableCleanup = false\n";
#    $result = $result . "  replace ecalBarrelMonitorModule.verbose = true\n";

    $result = $result . "  \n";
    $result = $result . "include \"DQM/EcalBarrelMonitorTasks/data/EcalBarrelMonitorTasks.cfi\"\n";

    $result = $result . "  \n";
    $result = $result . "include \"DQM/EcalBarrelMonitorTasks/data/disableCleanup.cff\"\n";

    $result = $result . "include \"DQM/EcalBarrelMonitorClient/data/EcalBarrelMonitorClient.cfi\"\n";
    $result = $result . "  \n";
    $result = $result . "  replace ecalBarrelMonitorClient.location = \"H4\"\n";
    $result = $result . "  replace ecalBarrelMonitorClient.baseHtmlDir = \".\"\n";
    $result = $result . "  replace ecalBarrelMonitorClient.enableTCC = true\n";
    $result = $result . "  replace ecalBarrelMonitorClient.prefixME = \"\"\n";
    $result = $result . "  replace ecalBarrelMonitorClient.clientName = \"EcalBarrelMonitorClient\"\n";
    $result = $result . "  replace ecalBarrelMonitorClient.enableServer = false\n";
    $result = $result . "  replace ecalBarrelMonitorClient.superModules = { 19 }\n";
    
#    $result = $result . "  replace ecalBarrelMonitorClient.verbose = true\n";

    $result = $result . "  replace ecalBarrelMonitorClient.enableMonitorDaemon = false\n";

    $result = $result . "  \n";
    $result = $result . "  module preScaler = Prescaler { int32 prescaleFactor = 1 }\n";

    $result = $result . "  \n";
    $result = $result . "  // sequences\n";

    $result = $result . "  \n";
    $result = $result . "  sequence ecalBarrelDataSequence = { preScaler,\n";
    $result = $result . "                                      ecalEBunpacker,\n";
    $result = $result . "                                      ecalUncalibHit,\n";
    $result = $result . "                                      ecalRecHit }\n";

    $result = $result . "  \n";
    $result = $result . "  sequence ecalBarrelMonitorSequence = { ecalBarrelMonitorModule,\n";
    $result = $result . "                                         ecalBarrelMonitorClient }\n";

    $result = $result . "  \n";
    $result = $result . "  // paths\n";

    $result = $result . "  \n";
    $result = $result . "  path p = { ecalBarrelDataSequence, ecalBarrelMonitorSequence }\n";

    $result = $result . "  \n";
    $result = $result . "  endpath q = { ecalBarrelCosmicTasksSequence }\n";

    $result = $result . "  \n";
    $result = $result . "  // services\n";

    $result = $result . "  \n"; 
    $result = $result . "  es_source = EcalTrivialConditionRetriever {\n";
    $result = $result . "    untracked double adcToGeVEBConstant = 0.00875\n";
    $result = $result . "    untracked vdouble amplWeights = { -0.333, -0.333, -0.333,\n";
    $result = $result . "                                       0.000,  0.000,  1.000,\n";
    $result = $result . "                                       0.000,  0.000,  0.000,  0.000 }\n";
    $result = $result . "    untracked vdouble pedWeights  = {  0.333,  0.333,  0.333,\n";
    $result = $result . "                                       0.000,  0.000,  0.000,\n";
    $result = $result . "                                       0.000,  0.000,  0.000,  0.000 }\n";
    $result = $result . "    untracked vdouble jittWeights = {  0.040,  0.040,  0.040,\n";
    $result = $result . "                                       0.000,  1.320, -0.050,\n";
    $result = $result . "                                      -0.500, -0.500, -0.400,  0.000 }\n";
    $result = $result . "  }\n";

    $result = $result . "  \n";
    $result = $result . "  service = FUShmDQMOutputService {\n";
    $result = $result . "    untracked int32 initialMessageBufferSize=1000000\n";
    $result = $result . "    double          lumiSectionsPerUpdate   =    1.0\n";
    $result = $result . "    bool            useCompression          =   true\n";
    $result = $result . "    int32           compressionLevel        =      1\n";
    $result = $result . "    untracked int32 lumiSectionInterval     =     30\n";
    $result = $result . "  }\n";

    $result = $result . "  \n"; 
    $result = $result . "  service = ModuleWebRegistry { }\n";

    $result = $result . "  \n"; 
    $result = $result . "  service = DaqMonitorROOTBackEnd{ }\n";
    
#    $result = $result . "  \n";
#    $result = $result . "  service = MessageLogger {\n";
#    $result = $result . "    untracked vstring destinations = { \"cout\" }\n";
#    $result = $result . "    untracked PSet cout = {\n";
#    $result = $result . "      untracked string threshold = \"FATAL\"\n";
#    $result = $result . "    }\n"; 
#    $result = $result . "  }\n";

    $result = $result . "}\n";

    return $result;
}

################################################################################
sub makeXmlHeader
{
    my $result = "";
    
    return "<?xml version='1.0'?>\n\n";
    $result = $result . "<xc:Partition\n";
    $result = $result . "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n";
    $result = $result . "  xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"\n";
    $result = $result . "  xmlns:xc=\"http://xdaq.web.cern.ch/xdaq/xsd/2004/XMLConfiguration-30\">\n\n";
    
    return $result;
}

################################################################################
sub makeXmlPartitionHeader
{
    my $result = "";
    
    $result = $result . "<xc:Partition\n";
    $result = $result . "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n";
    $result = $result . "  xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"\n";
    $result = $result . "  xmlns:xc=\"http://xdaq.web.cern.ch/xdaq/xsd/2004/XMLConfiguration-30\">\n\n";
    
    return $result;
}

################################################################################
sub makeXmlProfileHeader
{
    return 
	"<xp:Profile\n" .
	"  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" .
	"  xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"\n" .
	"  xmlns:xp=\"http://xdaq.web.cern.ch/xdaq/xsd/2005/XMLProfile-10\">\n\n";
}

################################################################################
sub makeXmlComm
{
    my $result = "";
    
    $result = $result . "  <!-- communication protocoll -->\n";
    $result = $result . "  <i2o:protocol xmlns:i2o=" .
	"\"http://xdaq.web.cern.ch/xdaq/xsd/2004/I2OConfiguration-30\">\n";
    
    while (@_>0) {
	my $appname  = shift (@_);
	my $localid  = shift (@_);
	my $instance = shift (@_);
	
	$result = $result . "    <i2o:target class=\"" . $appname
	                  . "\" instance=\"". $instance
                          . "\" tid=\"" . $localid . "\"/>\n";
    }
    $result = $result . "  </i2o:protocol>\n\n";
    
    return $result;
}

################################################################################
sub makeXmlContextHeader
{
    my ($contextname,$hostname,$port) = @_;

    my $result = "";
    
    $result = $result . "<!-- " . $contextname . " CONTEXT -->\n";
    $result = $result . "  <xc:Context url=\"http://$hostname:$port\">\n\n";
    
    return $result;
}

################################################################################
sub makeXmlEndpoint
{
    my ($hostname,$port) = @_;

    my $result = "";
    $result = $result . "    <xc:Endpoint hostname=\"" . $hostname .
	"\" network=\"tcp0\" " .
	"port=\"" .$port . "\" protocol=\"tcp\" " .
	"service=\"i2o\"></xc:Endpoint>\n\n";
    return $result;
}

################################################################################
sub makeXmlAppHeader
{
    my ($inContext,$appname,$localid) = @_;

    my $ns = "xc"; if (!$inContext) { $ns = "xp"; }
    
    my $result = "    <$ns:Application class=\"" . $appname . 
	"\" id=\"" . $localid . "\" instance=\"0\" network=\"local\">\n";
    return $result;
}

################################################################################
sub makeXmlAppProperties
{
    my $result = "";

    my $appname = shift (@_);

    $result = $result . "      <properties xmlns=\"urn:xdaq-application:" . $appname .
	                            "\" xsi:type=\"soapenc:Struct\">\n";
    while (@_>0) {
	my $name  = shift (@_);
	my $type  = shift (@_);
	my $value = shift (@_);
	$result = $result . "        <" . $name . " xsi:type=\"xsd:" . $type . "\">" . $value . "</" . $name . ">\n";
    }
    $result = $result . "      </properties>\n";
    
    return $result;
}

################################################################################
sub makeXmlUnicast
{
    my ($appname) = (@_);
    return "      <xc:Unicast class=\"" . $appname . "\" network=\"tcp0\"></xc:Unicast>\n";
}

################################################################################
sub makeXmlAppTrailer
{
    my ($inContext,$libpath,$libname) = @_;

    my $ns = "xc"; if (!$inContext) { $ns = "xp"; }
    
    my $result = "";
    
    $result = $result . "    </$ns:Application>\n";
    $result = $result . "    <$ns:Module>" . $libpath .
	                "/" . $libname . "</$ns:Module>\n\n";
    
    return $result;
}

################################################################################
sub makeXmlAppMonitor
{
    my $result = "";
    
    my $instance = $monitorCount;
    my $localid  = 60 + $instance;

    $monitorCount = $monitorCount+1;
    
    $result = $result . "    <xc:Application class=\"Monitor\""
	              . " group=\"monitoring\" id=\""
	              . $localid . "\" instance=\"" . $instance 
                      . "\" network=\"local\" service=\"monitor\">\n";
    $result = $result . "      <properties xmlns=\"urn:xdaq-application:Monitor\""
	              . " xsi:type=\"soapenc:Struct\">\n";
    $result = $result . "        <inprofile soapenc:arrayType=\"xsd:ur-type[5]\""
                      . " xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\""
		      . " xsi:type=\"soapenc:Array\">\n";
    $result = $result . "          <item soapenc:position=\"[0]\""
                      . "  xsi:type=\"xsd:string\">$pwd/flash/bu.flash</item>\n";
    $result = $result . "          <item soapenc:position=\"[1]\""
                      . " xsi:type=\"xsd:string\">$pwd/flash/activity.flash</item>\n";
    $result = $result . "          <item soapenc:position=\"[2]\""
	              . " xsi:type=\"xsd:string\">$pwd/flash/fu.flash</item>\n";
    $result = $result . "          <item soapenc:position=\"[3]\""
                      . " xsi:type=\"xsd:string\">$pwd/flash/ep.flash</item>\n";
    $result = $result . "          <item soapenc:position=\"[4]\""
                      . " xsi:type=\"xsd:string\">$pwd/flash/sm.flash</item>\n";
    $result = $result . "        </inprofile>\n";
    $result = $result . "        <useDiscovery xsi:type=\"xsd:boolean\">"
	              . "false</useDiscovery>\n";
    $result = $result . "      </properties>\n";
    
    return $result;
}

################################################################################
sub makeXmlContextTrailer
{
    return "  </xc:Context>\n\n\n";
}

################################################################################
sub makeXmlProfileTrailer
{
    return "</xp:Profile>\n";
}

################################################################################
sub makeXmlPartitionTrailer
{
    return "</xc:Partition>\n";
}

################################################################################
sub makeCtlDestroy
{
    my $result = "";

    my $cmd = "killall xdaq.exe";

    $result = $result . "#!/usr/bin/perl\n\n";
    $result = $result . "print \"$cmd ...\\n\";\n\n";
    $result = $result . "`$cmd`;\n\n";
    $result = $result . "print \"remove files and dirs ...\n\";\n\n";
    $result = $result . "`rm -rf cfg/ soap/ xml/ flash/ log/ /tmp/sm " .
	"configure enable halt stop gennums.txt summaryCatalog.txt test.root`;\n\n";
    $result = $result . "print \"FUShmCleanUp_t ...\\n\";\n\n";
    $result = $result . "`FUShmCleanUp_t`;\n\n";
    $result = $result . "print \"XDAQ session destroyed!\\n\";\n\n";
    $result = $result . "`rm destroy`;\n";
    
    return $result;
}

################################################################################
sub makeCtlCommand
{
    my ($cmd,$appname,$appabrev,$host,$port,$sleep) = (@_);

    my $result = "";
    
    $result = $result."print \"\\n===============================================\";\n";
    $result = $result."print \"\\n$cmd the $appname ($appabrev)...\";\n";
    $result = $result."print \"\\n\===============================================\";\n";
    $result = $result."my \$result = `".makeCurlCommand($cmd,$appabrev,$host,$port)."`;\n";
    $result = $result."print \"\\n\$result\\n\\n\";\n";
    if ($sleep>0){
	$result = $result . "\n`sleep $sleep`;\n";
    }
    $result = $result."\n";

    return $result;
}

################################################################################
sub makeCurlCommand
{
    my ($cmd,$appabrev,$host,$port) = @_;
    my $pwd = `pwd`; chomp($pwd);
    return 
	"curl --stderr /dev/null -H " .
	"\"SOAPAction: urn:xdaq-application:lid=4\" " .
	"-d @" . $pwd . "/soap/" . $cmd . $appabrev . ".xml " .
	"http://" . $host . ":" . $port;
}

################################################################################
sub makeFlashLists
{
    # activity.flash
    open(FLASH,">./flash/activity.flash") or die ("Can't open file: $!\n");
    print FLASH "<?xml version='1.0'?>\n";
    print FLASH "<mon:profile " .
	"xmlns:mon=\"http://xdaq.web.cern.ch/xdaq/xsd/2005/Monitor-10\">\n\n";
    print FLASH "<mon:flashlists>\n";
    print FLASH "  <mon:flash name=\"urn:xdaq-flashlist:processInfo\">\n";
    print FLASH "    <mon:item name=\"context\"     " .
	"infospace=\"urn:xdaq-monitorable:executive\" type=\"string\"/>\n";
    print FLASH "    <mon:item name=\"cpuUsage\"    " .
	"infospace=\"urn:xdaq-monitorable:executive\" type=\"double\"/>\n";
    print FLASH "    <mon:item name=\"pid\"         " .
	"infospace=\"urn:xdaq-monitorable:executive\" type=\"int\"/>\n";
    print FLASH "   <mon:item name=\"residentSize\" " .
	"infospace=\"urn:xdaq-monitorable:executive\" type=\"unsigned int\"/>\n";
    print FLASH "    <mon:item name=\"virtualSize\" " .
	"infospace=\"urn:xdaq-monitorable:executive\" type=\"unsigned int\"/>\n";
    print FLASH "  </mon:flash>\n";
    print FLASH "</mon:flashlists>\n\n";
    print FLASH "<mon:collectorsettings>\n";
    print FLASH "  <mon:collect\n";
    print FLASH "    flashlist=\"urn:xdaq-flashlist:processInfo\" " .
	"mode=\"all\" every=\"00:00:00:01:00\"\n";
    print FLASH "    history=\"false\" range=\"00:00:00:01:00\" persistent=\"false\"".
	" file=\"/tmp/processInfo.txt\" collect=\"true\"/>\n";
    print FLASH "</mon:collectorsettings>\n";
    print FLASH "</mon:profile>\n";
    close(FLASH);

    # bu.flash
    open(FLASH,">./flash/bu.flash") or die ("Can't open file: $!\n");
    print FLASH "<?xml version='1.0'?>\n";
    print FLASH "<mon:profile xmlns:mon=\"http://xdaq.web.cern.ch/xdaq/xsd/2005/Monitor-10\">\n\n";
    print FLASH "  <mon:flashlists>\n";
    print FLASH "    <mon:flash name=\"urn:xdaq-flashlist:BU-online\">\n";
    print FLASH "      <mon:item name=\"class\"              " .
	"infospace=\"urn:xdaq-monitorable:evf::BU:\" type=\"string\"          />\n";
    print FLASH "      <mon:item name=\"instance\"           " .
	"infospace=\"urn:xdaq-monitorable:evf::BU:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"runNumber\"          " .
	"infospace=\"urn:xdaq-monitorable:evf::BU:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"url\"                " .
	"infospace=\"urn:xdaq-monitorable:evf::BU:\" type=\"string\"          />\n\n";
    print FLASH "      <mon:item name=\"stateName\"          " .
	"infospace=\"urn:xdaq-monitorable:evf::BU:\" type=\"string\"          />\n";
    print FLASH "      <mon:item name=\"nbEventsInBU\"       " .
	"infospace=\"urn:xdaq-monitorable:evf::BU:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"deltaN\"             " .
	"infospace=\"urn:xdaq-monitorable:evf::BU:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"deltaSumOfSizes\"    " .
	"infospace=\"urn:xdaq-monitorable:evf::BU:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"deltaSumOfSquares\"  " .
	"infospace=\"urn:xdaq-monitorable:evf::BU:\" type=\"double\"          />\n";
    print FLASH "      <mon:item name=\"deltaT\"             " .
	"infospace=\"urn:xdaq-monitorable:evf::BU:\" type=\"double\"          />\n";
    print FLASH "    </mon:flash>\n";
    print FLASH "  </mon:flashlists>\n\n";
    print FLASH "  <mon:collectorsettings>\n";
    print FLASH "    <mon:collect\n";
    print FLASH "       flashlist=\"urn:xdaq-flashlist:BU-online\" mode=\"all\" " .
	"every=\"00:00:00:00:01\"\n";
    print FLASH "       history=\"false\" range=\"00:00:00:01:00\" persistent=\"false\" " .
	"file=\"/tmp/BU-online.txt\" collect=\"true\"/>\n";
    print FLASH "  </mon:collectorsettings>\n\n";
    print FLASH "</mon:profile>\n";
    close(FLASH);
    
    # fu.flash
    open(FLASH,">./flash/fu.flash") or die ("Can't open file: $!\n");
    print FLASH "<?xml version='1.0'?>\n";
    print FLASH "<mon:profile xmlns:mon=\"http://xdaq.web.cern.ch/xdaq/xsd/2005/Monitor-10\">\n\n";
    print FLASH "  <mon:flashlists>\n";
    print FLASH "    <mon:flash name=\"urn:xdaq-flashlist:FU-online\">\n";
    print FLASH "      <mon:item name=\"class\"               " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"string\"/>\n";
    print FLASH "      <mon:item name=\"instance\"            " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"runNumber\"           " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"url\"                 " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"string\"/>\n";
    print FLASH "      <mon:item name=\"nbReceivedEvents\"    " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"nbAcceptedEvents\"    " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"nbSentEvents\"        " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"nbPendingRequests\"   " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"nbDataErrors\"        " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"nbCrcErrors\"         " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"unsigned int 32\" />\n";
    print FLASH "      <mon:item name=\"inputRate\"           " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"double\"/>\n";
    print FLASH "      <mon:item name=\"inputThroughput\"     " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"double\"/>\n";
    print FLASH "      <mon:item name=\"outputThroughput\"    " .
	"infospace=\"urn:xdaq-monitorable:evf::FUResourceBroker:\" type=\"double\"/>\n";
    print FLASH "    </mon:flash>\n";
    print FLASH "  </mon:flashlists>\n\n";
    print FLASH "  <mon:collectorsettings>\n";
    print FLASH "    <mon:collect\n";
    print FLASH "       flashlist=\"urn:xdaq-flashlist:FU-online\" mode=\"all\" " .
	"every=\"00:00:00:00:01\"\n";
    print FLASH "       history=\"false\" range=\"00:00:00:01:00\" persistent=\"false\" " .
	"file=\"/tmp/FU-online.txt\" collect=\"true\"/>\n";
    print FLASH "  </mon:collectorsettings>\n\n";
    print FLASH "</mon:profile>\n";
    close(FLASH);
    
    # ep.flash
    open(FLASH,">./flash/ep.flash") or die ("Can't open file: $!\n");
    print FLASH "<?xml version='1.0'?>\n";
    print FLASH "<mon:profile xmlns:mon=\"http://xdaq.web.cern.ch/xdaq/xsd/2005/Monitor-10\">\n\n";
    print FLASH "  <mon:flashlists>\n";
    print FLASH "    <mon:flash name=\"urn:xdaq-flashlist:EP-online\">\n";
    print FLASH "      <mon:item name=\"class\"        " .
	"infospace=\"urn:xdaq-monitorable:evf::FUEventProcessor:\" type=\"string\"/>\n";
    print FLASH "      <mon:item name=\"instance\"     " .
	"infospace=\"urn:xdaq-monitorable:evf::FUEventProcessor:\" type=\"unsigned int 32\"/>\n";
    print FLASH "      <mon:item name=\"runNumber\"    " .
	"infospace=\"urn:xdaq-monitorable:evf::FUEventProcessor:\" type=\"unsigned int 32\"/>\n";
    print FLASH "      <mon:item name=\"stateName\"    " .
	"infospace=\"urn:xdaq-monitorable:evf::FUEventProcessor:\" type=\"string\"/>\n";
    print FLASH "      <mon:item name=\"epMacroState\" " .
	"infospace=\"urn:xdaq-monitorable:evf::FUEventProcessor:\" type=\"string\"/>\n";
    print FLASH "      <mon:item name=\"epMicroState\" " .
	"infospace=\"urn:xdaq-monitorable:evf::FUEventProcessor:\" type=\"string\"/>\n";
    print FLASH "      <mon:item name=\"nbProcessed\"  " .
	"infospace=\"urn:xdaq-monitorable:evf::FUEventProcessor:\" type=\"unsigned int 32\"/>\n";
    print FLASH "      <mon:item name=\"nbAccepted\"   " .
	"infospace=\"urn:xdaq-monitorable:evf::FUEventProcessor:\" type=\"unsigned int 32\"/>\n";
    print FLASH "    </mon:flash>\n";
    print FLASH "  </mon:flashlists>\n\n";
    print FLASH "  <mon:collectorsettings>\n";
    print FLASH "    <mon:collect\n";
    print FLASH "      flashlist=\"urn:xdaq-flashlist:EP-online\" mode=\"all\" " .
	"every=\"00:00:00:00:01\"\n";
    print FLASH "      history=\"false\" range =\"00:00:00:01:00\" persistent=\"false\" " .
	"file=\"/tmp/urn:xdaq-flashlist:EP-online.txt\" collect=\"true\"/>\n";
    print FLASH "  </mon:collectorsettings>\n\n";
    print FLASH "</mon:profile>\n";
    close(FLASH);
    
    # sm.flash
    open(FLASH,">./flash/sm.flash") or die ("Can't open file: $!\n");
    print FLASH "<?xml version='1.0'?>\n";
    print FLASH "<mon:profile xmlns:mon=\"http://xdaq.web.cern.ch/xdaq/xsd/2005/Monitor-10\">\n\n";
    print FLASH "  <mon:flashlists>\n";
    print FLASH "    <mon:flash name=\"urn:xdaq-flashlist:SM-online\">\n";
    print FLASH "      <mon:item name=\"class\"            " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"string\"/>\n";
    print FLASH "      <mon:item name=\"instance\"         " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"unsigned int 32\"/>\n";
    print FLASH "      <mon:item name=\"runNumber\"        " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"unsigned int 32\"/>\n";
    print FLASH "      <mon:item name=\"url\"              " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"string\"/>\n";
    print FLASH "      <mon:item name=\"receivedFrames\"   " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"unsigned int 32\"/>\n";
    print FLASH "      <mon:item name=\"storedEvents\"     " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"unsigned int 32\"/>\n";
    print FLASH "      <mon:item name=\"connectedFUs\"     " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"unsigned int 32\"/>\n";
    print FLASH "      <mon:item name=\"stateName\"        " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"string\"/>\n";
    print FLASH "      <mon:item name=\"storedEvents\"     " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"unsigned int 32\"/>\n";
    print FLASH "      <mon:item name=\"storedVolume\"     " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"double\"/>\n";
    print FLASH "      <mon:item name=\"instantBandwidth\" " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"double\"/>\n";
    print FLASH "      <mon:item name=\"instantRate\"      " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"double\"/>\n";
    print FLASH "      <mon:item name=\"progressMarker\"   " .
	"infospace=\"urn:xdaq-monitorable:StorageManager:\" type=\"string\"/>\n";
    print FLASH "    </mon:flash>\n";
    print FLASH "  </mon:flashlists>\n\n";
    print FLASH "  <mon:collectorsettings>\n";
    print FLASH "    <mon:collect\n";
    print FLASH "      flashlist=\"urn:xdaq-flashlist:SM-online\" mode=\"all\" " .
	"every=\"00:00:00:00:01\"\n";
    print FLASH "      history=\"false\" range=\"00:00:00:01:00\" persistent=\"false\" " .
	"file=\"/tmp/SM-online.txt\" collect=\"true\"/>\n";
    print FLASH "  </mon:collectorsettings>\n\n";
    print FLASH "</mon:profile>\n";
    close(FLASH);

}
